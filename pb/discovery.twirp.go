// Code generated by protoc-gen-twirp v5.10.1, DO NOT EDIT.
// source: pb/discovery.proto

package pb

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ===================
// Discovery Interface
// ===================

type Discovery interface {
	Registry(context.Context, *RegistryReq) (*RegistryResp, error)

	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error)

	Discovery(context.Context, *DiscoveryReq) (*DiscoveryResp, error)
}

// =========================
// Discovery Protobuf Client
// =========================

type discoveryProtobufClient struct {
	client HTTPClient
	urls   [3]string
	opts   twirp.ClientOptions
}

// NewDiscoveryProtobufClient creates a Protobuf client that implements the Discovery interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewDiscoveryProtobufClient(addr string, client HTTPClient, opts ...twirp.ClientOption) Discovery {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + DiscoveryPathPrefix
	urls := [3]string{
		prefix + "Registry",
		prefix + "Heartbeat",
		prefix + "Discovery",
	}

	return &discoveryProtobufClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *discoveryProtobufClient) Registry(ctx context.Context, in *RegistryReq) (*RegistryResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "Discovery")
	ctx = ctxsetters.WithMethodName(ctx, "Registry")
	out := new(RegistryResp)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *discoveryProtobufClient) Heartbeat(ctx context.Context, in *HeartbeatReq) (*HeartbeatResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "Discovery")
	ctx = ctxsetters.WithMethodName(ctx, "Heartbeat")
	out := new(HeartbeatResp)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *discoveryProtobufClient) Discovery(ctx context.Context, in *DiscoveryReq) (*DiscoveryResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "Discovery")
	ctx = ctxsetters.WithMethodName(ctx, "Discovery")
	out := new(DiscoveryResp)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =====================
// Discovery JSON Client
// =====================

type discoveryJSONClient struct {
	client HTTPClient
	urls   [3]string
	opts   twirp.ClientOptions
}

// NewDiscoveryJSONClient creates a JSON client that implements the Discovery interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewDiscoveryJSONClient(addr string, client HTTPClient, opts ...twirp.ClientOption) Discovery {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + DiscoveryPathPrefix
	urls := [3]string{
		prefix + "Registry",
		prefix + "Heartbeat",
		prefix + "Discovery",
	}

	return &discoveryJSONClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *discoveryJSONClient) Registry(ctx context.Context, in *RegistryReq) (*RegistryResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "Discovery")
	ctx = ctxsetters.WithMethodName(ctx, "Registry")
	out := new(RegistryResp)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *discoveryJSONClient) Heartbeat(ctx context.Context, in *HeartbeatReq) (*HeartbeatResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "Discovery")
	ctx = ctxsetters.WithMethodName(ctx, "Heartbeat")
	out := new(HeartbeatResp)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *discoveryJSONClient) Discovery(ctx context.Context, in *DiscoveryReq) (*DiscoveryResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "Discovery")
	ctx = ctxsetters.WithMethodName(ctx, "Discovery")
	out := new(DiscoveryResp)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ========================
// Discovery Server Handler
// ========================

type discoveryServer struct {
	Discovery
	hooks *twirp.ServerHooks
}

func NewDiscoveryServer(svc Discovery, hooks *twirp.ServerHooks) TwirpServer {
	return &discoveryServer{
		Discovery: svc,
		hooks:     hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *discoveryServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// DiscoveryPathPrefix is used for all URL paths on a twirp Discovery server.
// Requests are always: POST DiscoveryPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const DiscoveryPathPrefix = "/twirp/pb.Discovery/"

func (s *discoveryServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "Discovery")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/pb.Discovery/Registry":
		s.serveRegistry(ctx, resp, req)
		return
	case "/twirp/pb.Discovery/Heartbeat":
		s.serveHeartbeat(ctx, resp, req)
		return
	case "/twirp/pb.Discovery/Discovery":
		s.serveDiscovery(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *discoveryServer) serveRegistry(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegistryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegistryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *discoveryServer) serveRegistryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Registry")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RegistryReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *RegistryResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discovery.Registry(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegistryResp and nil error while calling Registry. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discoveryServer) serveRegistryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Registry")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(RegistryReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *RegistryResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discovery.Registry(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegistryResp and nil error while calling Registry. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discoveryServer) serveHeartbeat(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveHeartbeatJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveHeartbeatProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *discoveryServer) serveHeartbeatJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Heartbeat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(HeartbeatReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *HeartbeatResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discovery.Heartbeat(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *HeartbeatResp and nil error while calling Heartbeat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discoveryServer) serveHeartbeatProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Heartbeat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(HeartbeatReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *HeartbeatResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discovery.Heartbeat(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *HeartbeatResp and nil error while calling Heartbeat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discoveryServer) serveDiscovery(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDiscoveryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDiscoveryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *discoveryServer) serveDiscoveryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Discovery")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(DiscoveryReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *DiscoveryResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discovery.Discovery(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DiscoveryResp and nil error while calling Discovery. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discoveryServer) serveDiscoveryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Discovery")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(DiscoveryReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *DiscoveryResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discovery.Discovery(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DiscoveryResp and nil error while calling Discovery. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discoveryServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *discoveryServer) ProtocGenTwirpVersion() string {
	return "v5.10.1"
}

func (s *discoveryServer) PathPrefix() string {
	return DiscoveryPathPrefix
}

var twirpFileDescriptor1 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4d, 0x4b, 0xc4, 0x30,
	0x14, 0x24, 0xdd, 0xcf, 0xbe, 0xed, 0xba, 0x9a, 0x83, 0x84, 0x3d, 0x95, 0x20, 0xd2, 0x8b, 0x55,
	0x56, 0x04, 0xcf, 0xe2, 0x41, 0x3d, 0xc6, 0x9b, 0xb7, 0xa6, 0x09, 0x52, 0x50, 0x1a, 0xf3, 0xb2,
	0x0b, 0xfb, 0x67, 0xfc, 0xad, 0xd2, 0xd4, 0xb6, 0x59, 0x3d, 0x89, 0xb7, 0xbc, 0x8f, 0x99, 0x79,
	0x33, 0x2d, 0x50, 0x23, 0x2f, 0x55, 0x85, 0x65, 0xbd, 0xd3, 0x76, 0x9f, 0x1b, 0x5b, 0xbb, 0x9a,
	0x46, 0x46, 0xf2, 0x47, 0x58, 0x08, 0xfd, 0x5a, 0xa1, 0xb3, 0x7b, 0xa1, 0x3f, 0xe8, 0x11, 0x44,
	0x95, 0x62, 0x24, 0x25, 0x59, 0x2c, 0xa2, 0x4a, 0xd1, 0x53, 0x98, 0xa2, 0xb6, 0x3b, 0x6d, 0x59,
	0xe4, 0x7b, 0xdf, 0x15, 0xa5, 0x30, 0x2e, 0x94, 0xb2, 0x6c, 0xe4, 0xbb, 0xfe, 0xcd, 0x6f, 0x21,
	0x19, 0xa8, 0xd0, 0xfc, 0xe2, 0x62, 0x30, 0xc3, 0x6d, 0x59, 0x6a, 0x44, 0x4f, 0x36, 0x17, 0x5d,
	0xc9, 0x9f, 0x20, 0x79, 0xd0, 0x85, 0x75, 0x52, 0x17, 0xee, 0x8f, 0x57, 0xbc, 0xd5, 0x85, 0xf2,
	0x57, 0x4c, 0x84, 0x7f, 0xf3, 0x15, 0x2c, 0x03, 0x2e, 0x34, 0xdc, 0xc2, 0xf4, 0xb9, 0x5d, 0xff,
	0x87, 0xb9, 0x5e, 0x6a, 0x3c, 0x48, 0x35, 0x86, 0x5c, 0xf5, 0xae, 0xeb, 0xad, 0x63, 0x93, 0x94,
	0x64, 0x23, 0xd1, 0x95, 0xfc, 0x1c, 0x92, 0xfb, 0x2e, 0xec, 0xc6, 0xd0, 0xa0, 0x44, 0x42, 0x25,
	0x7e, 0x03, 0xcb, 0x60, 0x0f, 0x0d, 0x3d, 0x83, 0x59, 0x3b, 0x42, 0x46, 0xd2, 0x51, 0xb6, 0xd8,
	0x40, 0x6e, 0x64, 0xde, 0xde, 0x2f, 0xba, 0xd1, 0xe6, 0x93, 0x40, 0xdc, 0xe3, 0xe8, 0x05, 0xcc,
	0xbb, 0xdc, 0xe9, 0xaa, 0x59, 0x0f, 0x3e, 0xe8, 0xfa, 0xf8, 0xb0, 0x81, 0x86, 0x5e, 0x41, 0xdc,
	0x07, 0x44, 0xfd, 0x38, 0xcc, 0x7e, 0x7d, 0xf2, 0xa3, 0xd3, 0x22, 0x06, 0x35, 0x8f, 0x08, 0xcd,
	0xb5, 0x88, 0x03, 0x1b, 0x77, 0xe3, 0x97, 0xc8, 0x48, 0x39, 0xf5, 0xbf, 0xd9, 0xf5, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x2a, 0xd0, 0x99, 0x9a, 0x7c, 0x02, 0x00, 0x00,
}
