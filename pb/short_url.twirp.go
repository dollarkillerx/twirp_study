// Code generated by protoc-gen-twirp v5.10.1, DO NOT EDIT.
// source: pb/short_url.proto

package pb

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ==================
// ShortUrl Interface
// ==================

type ShortUrl interface {
	Parsing(context.Context, *ParsingUrl) (*ParsingKey, error)

	UnParsing(context.Context, *ParsingKey) (*ParsingUrl, error)
}

// ========================
// ShortUrl Protobuf Client
// ========================

type shortUrlProtobufClient struct {
	client HTTPClient
	urls   [2]string
	opts   twirp.ClientOptions
}

// NewShortUrlProtobufClient creates a Protobuf client that implements the ShortUrl interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewShortUrlProtobufClient(addr string, client HTTPClient, opts ...twirp.ClientOption) ShortUrl {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + ShortUrlPathPrefix
	urls := [2]string{
		prefix + "Parsing",
		prefix + "UnParsing",
	}

	return &shortUrlProtobufClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *shortUrlProtobufClient) Parsing(ctx context.Context, in *ParsingUrl) (*ParsingKey, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "ShortUrl")
	ctx = ctxsetters.WithMethodName(ctx, "Parsing")
	out := new(ParsingKey)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *shortUrlProtobufClient) UnParsing(ctx context.Context, in *ParsingKey) (*ParsingUrl, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "ShortUrl")
	ctx = ctxsetters.WithMethodName(ctx, "UnParsing")
	out := new(ParsingUrl)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ====================
// ShortUrl JSON Client
// ====================

type shortUrlJSONClient struct {
	client HTTPClient
	urls   [2]string
	opts   twirp.ClientOptions
}

// NewShortUrlJSONClient creates a JSON client that implements the ShortUrl interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewShortUrlJSONClient(addr string, client HTTPClient, opts ...twirp.ClientOption) ShortUrl {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + ShortUrlPathPrefix
	urls := [2]string{
		prefix + "Parsing",
		prefix + "UnParsing",
	}

	return &shortUrlJSONClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *shortUrlJSONClient) Parsing(ctx context.Context, in *ParsingUrl) (*ParsingKey, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "ShortUrl")
	ctx = ctxsetters.WithMethodName(ctx, "Parsing")
	out := new(ParsingKey)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *shortUrlJSONClient) UnParsing(ctx context.Context, in *ParsingKey) (*ParsingUrl, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "ShortUrl")
	ctx = ctxsetters.WithMethodName(ctx, "UnParsing")
	out := new(ParsingUrl)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =======================
// ShortUrl Server Handler
// =======================

type shortUrlServer struct {
	ShortUrl
	hooks *twirp.ServerHooks
}

func NewShortUrlServer(svc ShortUrl, hooks *twirp.ServerHooks) TwirpServer {
	return &shortUrlServer{
		ShortUrl: svc,
		hooks:    hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *shortUrlServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ShortUrlPathPrefix is used for all URL paths on a twirp ShortUrl server.
// Requests are always: POST ShortUrlPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ShortUrlPathPrefix = "/twirp/pb.ShortUrl/"

func (s *shortUrlServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "pb")
	ctx = ctxsetters.WithServiceName(ctx, "ShortUrl")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/pb.ShortUrl/Parsing":
		s.serveParsing(ctx, resp, req)
		return
	case "/twirp/pb.ShortUrl/UnParsing":
		s.serveUnParsing(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *shortUrlServer) serveParsing(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveParsingJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveParsingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shortUrlServer) serveParsingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Parsing")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ParsingUrl)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ParsingKey
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShortUrl.Parsing(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ParsingKey and nil error while calling Parsing. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shortUrlServer) serveParsingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Parsing")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ParsingUrl)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ParsingKey
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShortUrl.Parsing(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ParsingKey and nil error while calling Parsing. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shortUrlServer) serveUnParsing(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUnParsingJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUnParsingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shortUrlServer) serveUnParsingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UnParsing")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ParsingKey)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ParsingUrl
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShortUrl.UnParsing(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ParsingUrl and nil error while calling UnParsing. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shortUrlServer) serveUnParsingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UnParsing")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ParsingKey)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ParsingUrl
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShortUrl.UnParsing(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ParsingUrl and nil error while calling UnParsing. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shortUrlServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *shortUrlServer) ProtocGenTwirpVersion() string {
	return "v5.10.1"
}

func (s *shortUrlServer) PathPrefix() string {
	return ShortUrlPathPrefix
}

var twirpFileDescriptor2 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x48, 0xd2, 0x2f,
	0xce, 0xc8, 0x2f, 0x2a, 0x89, 0x2f, 0x2d, 0xca, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x2a, 0x48, 0x52, 0x92, 0xe3, 0xe2, 0x0a, 0x48, 0x2c, 0x2a, 0xce, 0xcc, 0x4b, 0x0f, 0x2d, 0xca,
	0x11, 0x12, 0xe0, 0x62, 0x2e, 0x2d, 0xca, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31,
	0x91, 0xe4, 0xbd, 0x53, 0x2b, 0x41, 0xf2, 0xd9, 0xa9, 0x95, 0x30, 0xf9, 0xec, 0xd4, 0x4a, 0xa3,
	0x24, 0x2e, 0x8e, 0x60, 0x90, 0xb1, 0x20, 0xdd, 0x9a, 0x5c, 0xec, 0x50, 0xb5, 0x42, 0x7c, 0x7a,
	0x05, 0x49, 0x7a, 0x08, 0x83, 0xa5, 0x90, 0xf9, 0x20, 0x83, 0xb4, 0xb9, 0x38, 0x43, 0xf3, 0xb0,
	0x29, 0xf6, 0x4e, 0xad, 0x94, 0x42, 0xd3, 0xec, 0xc4, 0x12, 0xc5, 0x54, 0x90, 0x94, 0xc4, 0x06,
	0x76, 0xb4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xb8, 0x13, 0xe8, 0xca, 0x00, 0x00, 0x00,
}
